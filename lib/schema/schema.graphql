# This file was generated. Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type JDictAPIResult {
    data: [JDictWord!]!
}

type JDictKanji {
    hanviet: String!
    id: Int!
    kanji: String!
}

type JDictWord {
    id: Int!
    kana: String!
    kanjis: [JDictKanji!]!
    slug: String!
    suggest_mean: String!
    word: String!
}

type JishoAPIResult {
    data: [JishoResult!]!
}

type JishoJapaneseWord {
    reading: String
    word: String
}

type JishoResult {
    japanese: [JishoJapaneseWord!]!
}

type Kanji {
    hv: String
    id: String!
}

type Mutation {
    addNewWord(word: WordInsertInput!): Word!
    upsertKanji(id: String!, kanji: KanjiUpsertInput!): Kanji!
    upsertKanjis(kanjis: [KanjiUpsertInputPair!]!): Boolean!
}

type Query {
    jdictSearchWord(word: String!): JDictAPIResult!
    jishoSearchWord(word: String!): JishoAPIResult!
    kanji(id: String!): Kanji!
    tags: [Tag!]
    word(id: String!): Word!
    words(limit: Int, where: WordQueryInput): [Word!]
}

type Tag {
    id: String!
    label: String!
}

type Word {
    explain: String!
    id: ID!
    kanji: [Kanji!]
    pronounce: String!
    tags: [Tag!]
    word: String!
}

input ArrayStringComparator {
    arrayContains: [String!]
    arrayContainsAny: [String!]
}

input KanjiUpsertInput {
    hv: String!
}

input KanjiUpsertInputPair {
    hv: String!
    id: String!
}

input StringComparator {
    eq: String
    in: [String!]
    neq: String
    notIn: [String!]
}

input WordInsertInput {
    explain: String!
    pronounce: String!
    tags: [String!]
    word: String!
}

input WordQueryInput {
    tags: ArrayStringComparator
    word: StringComparator
}
